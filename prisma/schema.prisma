// Multi-Tenant QR Menu System Database Schema - SQLite Compatible
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Business Type model
model BusinessType {
  id                    String    @id @default(cuid())
  nameTr                String
  nameEn                String
  nameAr                String
  descriptionTr         String?
  descriptionEn         String?
  descriptionAr         String?
  iconUrl               String?
  isActive              Boolean   @default(true)
  sortOrder             Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdById           String

  // Relations
  createdBy             User      @relation("BusinessTypeCreator", fields: [createdById], references: [id])
  tenants               Tenant[]

  @@map("business_types")
}

// User model
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  firstName             String
  lastName              String
  role                  String    @default("TENANT_STAFF") // SUPER_ADMIN, TENANT_ADMIN, TENANT_MANAGER, TENANT_STAFF
  password              String
  mustChangePassword    Boolean   @default(true)
  lastLogin             DateTime?
  lastPasswordChange    DateTime?
  loginAttempts         Int       @default(0)
  lockedUntil           DateTime?
  mfaEnabled            Boolean   @default(false)
  mfaSecret             String?
  phoneNumber           String?
  avatarUrl             String?
  isActive              Boolean   @default(true)
  preferences           String?   // JSON string for user preferences
  timezone              String    @default("UTC")
  language              String    @default("en")
  lastLoginIP           String?
  emailVerified         Boolean   @default(false)
  emailVerificationToken String?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdById           String?

  // Relations
  createdBy             User?         @relation("UserCreator", fields: [createdById], references: [id])
  createdUsers          User[]        @relation("UserCreator")
  tenantUsers           TenantUser[]
  createdTenants        Tenant[]      @relation("TenantCreator")
  createdBusinessTypes  BusinessType[] @relation("BusinessTypeCreator")
  createdCategories     Category[]    @relation("CategoryCreator")
  updatedCategories     Category[]    @relation("CategoryUpdater")
  createdProducts       Product[]     @relation("ProductCreator")
  updatedProducts       Product[]     @relation("ProductUpdater")
  auditLogs            AuditLog[]

  @@map("users")
}

// Tenant model
model Tenant {
  id                    String    @id @default(cuid())
  slug                  String    @unique
  businessName          String
  businessNameTr        String?
  businessNameAr        String?
  businessTypeId        String
  email                 String
  phone                 String?
  address               String?
  addressTr             String?
  addressAr             String?
  ownerName             String
  ownerEmail            String
  ownerPhone            String?
  customDomain          String?
  subdomain             String?
  defaultLanguage       String    @default("tr")
  currency              String    @default("TRY")
  timezone              String    @default("Europe/Istanbul")
  logoUrl               String?
  logoImage             String?   // Base64 encoded image data
  coverImage            String?   // Base64 encoded cover image data
  primaryColor          String?
  secondaryColor        String?
  accentColor           String?
  customCSS             String?
  description           String?
  descriptionTr         String?
  descriptionAr         String?
  subscriptionStatus    String    @default("ACTIVE") // ACTIVE, GRACE_PERIOD, SUSPENDED, CANCELLED
  subscriptionPlan      String    @default("BASIC")  // BASIC, PREMIUM, ENTERPRISE
  monthlyFee            Float     @default(100.00)
  lastPaymentDate       DateTime?
  nextPaymentDate       DateTime?
  overdueSince          DateTime?
  suspendedAt           DateTime?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdById           String

  // Relations
  businessType          BusinessType    @relation(fields: [businessTypeId], references: [id])
  createdBy             User            @relation("TenantCreator", fields: [createdById], references: [id])
  tenantUsers           TenantUser[]
  categories            Category[]
  products              Product[]
  paymentHistory        PaymentRecord[]
  auditLogs             AuditLog[]

  @@map("tenants")
}

// TenantUser model
model TenantUser {
  id                    String    @id @default(cuid())
  tenantId              String
  userId                String
  role                  String    @default("STAFF") // ADMIN, MANAGER, STAFF
  canManageUsers        Boolean   @default(false)
  canManageBilling      Boolean   @default(false)
  canManageSettings     Boolean   @default(false)
  isActive              Boolean   @default(true)
  joinedAt              DateTime  @default(now())
  leftAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdById           String

  // Relations
  tenant                Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User      @relation(fields: [userId], references: [id])

  @@unique([tenantId, userId])
  @@map("tenant_users")
}

// Category model
model Category {
  id                    String    @id @default(cuid())
  tenantId              String
  nameTr                String
  nameEn                String
  nameAr                String
  descriptionTr         String?
  descriptionEn         String?
  descriptionAr         String?
  imageUrl              String?
  isActive              Boolean   @default(true)
  sortOrder             Int       @default(0)
  showInMenu            Boolean   @default(true)
  slugEn                String?
  slugAr                String?
  metaDescriptionEn     String?
  metaDescriptionAr     String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdById           String
  updatedById           String?

  // Relations
  tenant                Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy             User      @relation("CategoryCreator", fields: [createdById], references: [id])
  updatedBy             User?     @relation("CategoryUpdater", fields: [updatedById], references: [id])
  products              Product[]

  @@map("categories")
}

// Product model
model Product {
  id                    String    @id @default(cuid())
  tenantId              String
  categoryId            String
  nameTr                String
  nameEn                String
  nameAr                String
  descriptionTr         String?
  descriptionEn         String?
  descriptionAr         String?
  imageUrl              String?
  imageUrls             String?   // JSON string for multiple images
  basePrice             Float
  currency              String    @default("TRY")
  discountPrice         Float?
  discountStartDate     DateTime?
  discountEndDate       DateTime?
  isActive              Boolean   @default(true)
  isFeatured            Boolean   @default(false)
  isOutOfStock          Boolean   @default(false)
  stockQuantity         Int?
  sortOrder             Int       @default(0)
  tags                  String?   // JSON string for tags array
  preparationTime       String?
  servingSize           String?
  calories              Int?
  ingredientsTr         String?   // JSON string for ingredients array
  ingredientsEn         String?   // JSON string for ingredients array
  ingredientsAr         String?   // JSON string for ingredients array
  allergensTr           String?   // JSON string for allergens array
  allergensEn           String?   // JSON string for allergens array
  allergensAr           String?   // JSON string for allergens array
  slugEn                String?
  slugAr                String?
  metaDescriptionEn     String?
  metaDescriptionAr     String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdById           String
  updatedById           String?

  // Relations
  tenant                Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category              Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdBy             User      @relation("ProductCreator", fields: [createdById], references: [id])
  updatedBy             User?     @relation("ProductUpdater", fields: [updatedById], references: [id])

  @@map("products")
}

// PaymentRecord model
model PaymentRecord {
  id                    String    @id @default(cuid())
  tenantId              String
  amount                Float
  currency              String    @default("TRY")
  method                String    @default("BANK_TRANSFER") // CASH, BANK_TRANSFER, CREDIT_CARD, DIGITAL_WALLET, CHECK, OTHER
  status                String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED, REFUNDED
  description           String?
  paymentDate           DateTime?
  paidAt                DateTime?
  dueDate               DateTime?
  referenceNumber       String?
  notes                 String?
  processedBy           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  tenant                Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("payment_records")
}

// AuditLog model
model AuditLog {
  id                    String    @id @default(cuid())
  tenantId              String?
  userId                String
  action                String    // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, PASSWORD_CHANGE, ROLE_CHANGE, SUSPEND, ACTIVATE, PAYMENT_UPDATE
  resource              String
  resourceId            String?
  oldValues             String?   // JSON string for old values
  newValues             String?   // JSON string for new values
  ipAddress             String
  userAgent             String
  requestMethod         String
  requestUrl            String
  createdAt             DateTime  @default(now())

  // Relations
  tenant                Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User      @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}